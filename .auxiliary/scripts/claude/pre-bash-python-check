#!/usr/bin/env python3
# vim: set filetype=python fileencoding=utf-8:
# -*- coding: utf-8 -*-

''' Claude Code hook to detect direct python usage in Bash commands. '''

import json
import re
import sys


# Compile regex patterns once for efficiency - match python as command only
_PYTHON_PATTERN = re.compile(
    r'(?:^|(?:;|&|&&|\|\|)\s*)(?:python|python3|python3\.\d+)(?:\s|$)'
)
_PYTHON_C_PATTERN = re.compile(
    r'(?:^|(?:;|&|&&|\|\|)\s*)(?:python|python3|python3\.\d+)\s+.*-c'
)


def main( ):
    ''' Main entry point for the Python usage check hook. '''
    # Read hook event JSON from stdin
    try:
        event_data = json.load( sys.stdin )
    except json.JSONDecodeError:
        print( "Error: Invalid JSON input", file = sys.stderr )
        sys.exit( 2 )
    
    # Only check Bash tool usage
    tool_name = event_data.get( 'tool_name', '' )
    if tool_name != 'Bash':
        sys.exit( 0 )
    
    # Get the command from tool input
    tool_input = event_data.get( 'tool_input', { } )
    command = tool_input.get( 'command', '' )
    
    # Check for multi-line python -c scripts (only for -c commands)
    if _PYTHON_C_PATTERN.search( command ):
        # Look for indicators of multi-line scripts within python -c context
        # Extract the -c argument area to check for multi-line indicators
        c_match = re.search( r'-c\s*(["\'])([^"\']*)\1', command )
        if c_match and ( ';' in c_match.group(2) or '\n' in c_match.group(2) ):
            suggestion = (".auxiliary/scribbles/ with 'hatch run python'" 
                         if 'hatch' not in command 
                         else ".auxiliary/scribbles/")
            print(
                f"Warning: Multi-line Python script detected in command\n"
                f"Consider writing the script to a file under {suggestion} "
                f"instead of using python -c with multi-line code.",
                file = sys.stderr
            )
            sys.exit( 2 )
    
    # Check for direct python usage patterns
    if _PYTHON_PATTERN.search( command ):
        # Check if it's already using hatch
        if 'hatch' in command:
            sys.exit( 0 )
        
        print(
            f"Warning: Direct Python usage detected in command: {command}\n"
            f"Consider using 'hatch run python' or "
            f"'hatch --env develop run python' to ensure dependencies "
            f"are available.",
            file = sys.stderr
        )
        # Exit with code 2 to show warning to Claude
        sys.exit( 2 )
    
    # No issues found
    sys.exit( 0 )


if __name__ == '__main__':
    main()